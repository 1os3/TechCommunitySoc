services:
  # 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: tech-community-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-forum_db}
      - POSTGRES_USER=${POSTGRES_USER:-forum_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-forum_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - tech-community-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-forum_user} -d ${POSTGRES_DB:-forum_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 数据库向量扩展
  pgvector:
    image: pgvector/pgvector:pg15
    container_name: tech-community-pgvector
    depends_on:
      - postgres
    networks:
      - tech-community-network
    command: ["echo", "PGVector extension container - will be used by postgres"]
    deploy:
      restart_policy:
        condition: on-failure

  # 数据库管理工具
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: tech-community-pgadmin
    depends_on:
      - postgres
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@techcommunity.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - tech-community-network
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ubuntu-nodejs:latest
    container_name: tech-community-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-forum_db}
      - DB_USER=${POSTGRES_USER:-forum_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-forum_password}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
    ports:
      - "${BACKEND_PORT:-3000}:${PORT:-3000}"
    networks:
      - tech-community-network
    restart: unless-stopped

  # 管理端应用
  admin-app:
    build:
      context: ./frontend/administrator-app
      dockerfile: Dockerfile
    container_name: tech-community-admin
    depends_on:
      - backend
    ports:
      - "${ADMIN_PORT:-8080}:80"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3000/api}
    networks:
      - tech-community-network
    restart: unless-stopped

  # 用户端应用
  user-app:
    build:
      context: ./frontend/user-app
      dockerfile: Dockerfile
    container_name: tech-community-user
    depends_on:
      - backend
    ports:
      - "${USER_PORT:-80}:80"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3000/api}
    networks:
      - tech-community-network
    restart: unless-stopped

  # 工具容器 - 用于健康检查和其他工具
  tools:
    image: curlimages/curl:latest
    container_name: tech-community-tools
    depends_on:
      - backend
      - admin-app
      - user-app
    networks:
      - tech-community-network
    command: ["sh", "-c", "echo 'Tools container ready for use' && sleep infinity"]
    deploy:
      restart_policy:
        condition: on-failure

networks:
  tech-community-network:
    driver: bridge

volumes:
  postgres_data: